properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: dialog_box
    type: Krampus21::DialogBoxes::Base*
    init_with: nullptr
    constructor_arg: true

  - name: dialog_box_num_revealed_characters
    type: int
    init_with: 9999
    getter: true
    constructor_arg: true

  - name: place
    type: allegro_flare::placement2d
    init_with: '{ 1920/2, 1080/4*3, 1920/5*3, 1080/4 }'
    getter: true


functions:


  - name: render
    guards: [ al_is_system_installed(), al_is_primitives_addon_initialized(), al_get_current_display(), dialog_box ]
    body: |
      float roundness = 18.0f;
      float border_thickness = 5.0f;
      float border_inner_padding = border_thickness * 3;
      ALLEGRO_COLOR fill_color = al_color_html("162428");
      ALLEGRO_COLOR border_color = al_color_html("244751");

      // draw backfill and border
      place.start_transform();
      al_draw_filled_rounded_rectangle(
         0 + border_inner_padding,
         0 + border_inner_padding,
         place.size.x - border_inner_padding,
         place.size.y - border_inner_padding,
         roundness * 0.5,
         roundness * 0.5,
         fill_color
      );
      al_draw_rounded_rectangle(0, 0, place.size.x, place.size.y, roundness, roundness, border_color, border_thickness);

      if (dialog_box->get_finished())
      {
         draw_special_state_empty_text();
      }
      else
      {
         draw_styled_revealed_text();
      }

      place.restore_transform();
      return;
    body_dependency_symbols:
      - al_is_system_installed
      - al_is_primitives_addon_initialized
      - al_draw_filled_rounded_rectangle
      - al_color_html


  - name: draw_special_state_empty_text
    body: |
      ALLEGRO_FONT* text_font = obtain_dialog_font();
      ALLEGRO_COLOR text_color = al_color_name("darkslategray");
      float line_height = al_get_font_line_height(text_font);
      std::string text = "[dialog finished]";
      al_draw_text(
         text_font,
         text_color,
         place.size.x * 0.5,
         place.size.y * 0.5 - line_height * 0.5,
         ALLEGRO_ALIGN_CENTER,
         text.c_str()
      );
      return;


  - name: draw_action_text
    parameters:
      - name: text
        type: std::string
        default_argument: '"[unset-action-text]"'
    body: |
      ALLEGRO_FONT* text_font = obtain_dialog_font();
      ALLEGRO_COLOR text_color = al_color_html("66a9bc");
      float line_height = al_get_font_line_height(text_font);
      al_draw_text(
         text_font,
         text_color,
         place.size.x-20,
         place.size.y-line_height-10,
         ALLEGRO_ALIGN_RIGHT,
         text.c_str()
      );

      // draw the player's action cursor thing at the bottom
      int current_dialog_box_page_character_count = dialog_box->get_current_page_text().length();
      if (dialog_box_num_revealed_characters >= current_dialog_box_page_character_count)
      {
         if (dialog_box->at_last_page()) draw_action_text("[close]");
         else draw_action_text(">>");
      }

      return;

  - name: draw_styled_revealed_text
    body: |
      std::string text = get_dialog_box_text();
      float text_padding_x = 40.0f;
      float text_padding_y = 30.0f;
      float text_box_max_width = place.size.x - (text_padding_x * 2);
      ALLEGRO_FONT* text_font = obtain_dialog_font();
      float line_height = al_get_font_line_height(text_font);
      ALLEGRO_COLOR text_color = al_color_html("66a9bc");

      al_draw_multiline_text(
         text_font,
         text_color,
         text_padding_x,
         text_padding_y,
         text_box_max_width,
         line_height,
         ALLEGRO_ALIGN_LEFT,
         concat_text(text, dialog_box_num_revealed_characters).c_str()
      );
      return;


  - name: get_dialog_box_text
    type: std::string
    guards: [ dialog_box ]
    body: |
      return dialog_box->get_current_page_text();


  - name: concat_text
    type: std::string
    guards: [ dialog_box ]
    parameters:
      - name: source_text
        type: std::string
        default_argument: '""'
      - name: length
        type: int
        default_argument: 0
    body: |
      return source_text.substr(0, length);


  - name: obtain_dialog_font
    guards: [ al_is_font_addon_initialized(), al_is_ttf_addon_initialized(), font_bin ]
    private: true
    type: ALLEGRO_FONT*
    body: |
      static const std::string FONT_IDENTIFIER = "Purista Medium.ttf -50";
      ALLEGRO_FONT* result_font = font_bin->operator[](FONT_IDENTIFIER);
      return result_font;


dependencies:


  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: al_get_current_display
    headers: [ allegro5/allegro.h ]
  - symbol: al_color_html
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_filled_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: Blast::StringJoiner
    headers: [ Blast/StringJoiner.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: Krampus21::DialogBoxes::Base*
    headers: [ Krampus21/DialogBoxes/Base.hpp ]
  - symbol: allegro_flare::placement2d
    headers: [ allegro_flare/placement2d.h ]


