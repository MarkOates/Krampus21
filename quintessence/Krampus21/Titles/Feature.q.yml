properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: primary_text
    type: std::string
    constructor_arg: true

  - name: secondary_text
    type: std::string
    constructor_arg: true

  - name: primary_text_kerning
    type: int
    init_with: 4

  - name: secondary_text_kerning
    type: int
    init_with: 4

functions:


  - name: render
    guards: [ font_bin ]
    body: |
      float opacity = 1.0;
      ALLEGRO_COLOR fading_white = ALLEGRO_COLOR{opacity, opacity, opacity, opacity};
      ALLEGRO_FONT *primary_text_font = obtain_primary_text_font();
      ALLEGRO_FONT *secondary_text_font = obtain_secondary_text_font();
      std::string primary_text = kern(this->primary_text, primary_text_kerning);
      std::string secondary_text = kern(this->secondary_text, secondary_text_kerning);
      float primary_text_width = al_get_text_width(primary_text_font, primary_text.c_str());
      float primary_text_height = al_get_font_line_height(primary_text_font);
      float secondary_text_width = al_get_text_width(secondary_text_font, secondary_text.c_str());
      float secondary_text_height = al_get_font_line_height(secondary_text_font);
      //FADE TO WHITE
      //FADING WHITE
      //FADING LIGHT
      allegro_flare::placement2d primary_text_place(1920/2, 1080/2-30, primary_text_width, primary_text_height);
      allegro_flare::placement2d secondary_text_place(1920/2, 1080/2+56, secondary_text_width, secondary_text_height);

      // draw the text

      primary_text_place.start_transform();
      al_draw_text(primary_text_font, fading_white, 0, 0, ALLEGRO_ALIGN_LEFT, primary_text.c_str());
      primary_text_place.restore_transform();

      secondary_text_place.start_transform();
      al_draw_text(secondary_text_font, fading_white, 0, 0, ALLEGRO_ALIGN_LEFT, secondary_text.c_str());
      secondary_text_place.restore_transform();

      return;
    body_dependency_symbols:
      - allegro_flare::placement2d
      - al_get_font_line_height
      - al_draw_rectangle


  - name: kern
    type: std::string
    parameters:
      - name: text
        type: std::string
        default_argument: '""'
      - name: amount
        type: int
        default_argument: 6
    body: |
      std::vector<char> v(text.begin(), text.end());
      std::vector<std::string> strs;

      for (auto &vc : v) strs.push_back(std::string(1, vc) + std::string(amount, ' '));
      std::string str = Blast::StringJoiner(strs, "").join();

      str.substr(0, str.length() - amount);
      return str;
    body_dependency_symbols:
      - Blast::StringJoiner


  - name: obtain_primary_text_font
    type: ALLEGRO_FONT*
    private: true
    body: return font_bin->auto_get("Lato-Bold.ttf -70");


  - name: obtain_secondary_text_font
    type: ALLEGRO_FONT*
    private: true
    body: return font_bin->auto_get("Lato-Bold.ttf -32");


dependencies:


  - symbol: allegro_flare::placement2d
    headers: [ allegro_flare/placement2d.h ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_get_font_line_height
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: Blast::StringJoiner
    headers: [ Blast/StringJoiner.hpp ]


