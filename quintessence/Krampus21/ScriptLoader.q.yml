properties:


  - name: script_lines
    type: std::vector<std::string>
    init_with: '{}'
    constructor_arg: true

  - name: dialog_factory
    type: Krampus21::DialogFactory
    init_with: '{}'


functions:


  - name: parse
    type: std::vector<Krampus21::DialogBoxes::Base*>
    body: |
      std::vector<Krampus21::DialogBoxes::Base*> result;

      int line_num = 0;
      for (auto &script_line : script_lines)
      {
         Krampus21::DialogBoxes::Base* created_dialog = parse_line_and_build_dialog(script_line);
         if (!created_dialog)
         {
            std::cout << "Script loading/parsing error on line [" << line_num << "]" << std::endl;
         }
         else
         {
            result.push_back(created_dialog);
         }
         line_num++;
      }

      return result;
    body_dependency_symbols:
      - std::cout


  - name: parse_line_and_build_dialog
    type: Krampus21::DialogBoxes::Base*
    parameters:
      - name: script_line
        type: std::string
        default_argument: '{}'
    body: |
      std::string DIALOG = "DIALOG";
      Krampus21::DialogBoxes::Base* created_dialog = nullptr;

      std::string commandment = DIALOG;
      std::string arguments = "";

      if (commandment == DIALOG)
      {
         created_dialog = dialog_factory.create_basic_dialog(std::vector<std::string>{script_line});
      }

      return created_dialog;


dependencies:


  - symbol: std::vector<Krampus21::DialogBoxes::Base*>
    headers: [ vector, Krampus21/DialogBoxes/Base.hpp ]
  - symbol: Krampus21::DialogBoxes::Base*
    headers: [ Krampus21/DialogBoxes/Base.hpp ]
  - symbol: Krampus21::DialogFactory
    headers: [ Krampus21/DialogFactory.hpp ]
  - symbol: Krampus21::DialogBoxes::Basic*
    headers: [ Krampus21/DialogBoxes/Basic.hpp ]


