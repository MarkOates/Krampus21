parent_classes:


  - class: AllegroFlare::Screen
    scope: public
    init_with: ''


properties:


  - name: framework
    type: AllegroFlare::Framework*
    init_with: nullptr
    constructor_arg: true

  - name: screens
    type: AllegroFlare::Screens*
    init_with: nullptr
    constructor_arg: true

  - name: sound_effect_elements
    type: std::map<std::string, AllegroFlare::AudioRepositoryElement>
    private: true
    init_with: '{}'
    constructor_arg: true

  - name: music_track_elements
    type: std::map<std::string, AllegroFlare::AudioRepositoryElement>
    private: true
    init_with: '{}'
    constructor_arg: true

  - name: user_event_emitter_souce
    type: ALLEGRO_EVENT_SOURCE
    init_with: '{}'

  - name: user_event_emitter
    type: Krampus21::UserEventEmitter
    init_with: '{}'

  - name: audio_controller
    type: AllegroFlare::AudioController
    init_with: '&framework->get_sample_bin_ref(), sound_effect_elements, music_track_elements'

  - name: current_dialog
    type: Krampus21::DialogBoxes::Base*
    init_with: nullptr

  - name: initialized
    type: bool
    init_with: false

  - name: script
    type: Krampus21::Script
    init_with: ''


functions:


  - name: initialize
    guards: [ (!initialized) ]
    body: |
      audio_controller.initialize();
      initialized = true;
      return;


  - name: load_script
    type: bool
    parameters:
      - name: filename
        type: std::string
        default_argument: '"unset-script-filename.txt"'
    body: |
      if (!Blast::FileExistenceChecker(filename).exists())
      {
         std::cout << "ScreenManager::load_script: file \"" << filename
                   << "\" does not exist and could not be loaded." << std::endl;
         return false;
      }
      std::vector<std::string> script_lines = AllegroFlare::php::file_get_contents_split(filename);
      script = Krampus21::Script(script_lines);
      script.initialize();
      return true;
    body_dependency_symbols:
      - AllegroFlare::php::file_get_contents_split
      - Blast::FileExistenceChecker


  - name: advance
    body: |
      script.goto_next_line();
      play_current_script_line();
      // if it's a dialog and the dialog is finished, play the next script line
      //if (current_dialog) current_dialog->
      return;


  - name: play_current_script_line
    type: bool
    body: |
      //if (script->at_valid_line())
      std::string script_line_text = script.get_current_line_text();
      Krampus21::ScriptLineRunner script_line_runner;
      Krampus21::DialogBoxes::Base *created_dialog = script_line_runner.parse_line_and_create_dialog(script_line_text);
      if (created_dialog)
      {
         if (current_dialog) delete current_dialog;
         current_dialog = created_dialog;
      }
      return true;
    body_dependency_symbols:
      - Krampus21::ScriptLineRunner
      - Krampus21::DialogFactory


  - name: start_game
    body: |
      play_current_script_line();
      play_music_track("etherial-ambience-01.wav");
      return;
    body_dependency_symbols: []


  - name: shutdown_game
    guards: [ framework ]
    body: |
      framework->shutdown_program = true;
      return;


  - name: update_dialog
    body: |
      if (current_dialog) current_dialog->update();
      return;


  - name: dialog_is_finished
    type: bool
    body: |
      if (!current_dialog) return true;
      return current_dialog->get_finished();


  - name: primary_timer_func
    override: true
    body: |
      al_clear_to_color(ALLEGRO_COLOR{0, 0, 0, 0});
      update_dialog();
      if (dialog_is_finished())
      {
      }
      else if (current_dialog)
      {
         Krampus21::DialogBoxRenderer renderer(obtain_font_bin(), current_dialog);
         renderer.render();
      }
      return;
    body_dependency_symbols:
      - Krampus21::DialogBoxRenderer


  - name: play_music_track
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"unset-music-identifier"'
    body: |
      audio_controller.play_music_track_by_identifier(identifier);
      return;


  - name: key_down_func
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    body: |
      switch (ev->type)
      {
      case ALLEGRO_EVENT_KEY_DOWN:
         switch(ev->keyboard.keycode)
         {
            case ALLEGRO_KEY_ESCAPE:
               shutdown_game();
               break;
            case ALLEGRO_KEY_SPACE:
               advance();
               break;
            case ALLEGRO_KEY_UP:
            case ALLEGRO_KEY_K:
               // TODO move cursor up
               break;
            case ALLEGRO_KEY_DOWN:
            case ALLEGRO_KEY_J:
               // TODO move cursor down
               break;
            case ALLEGRO_KEY_ENTER:
               // TODO submit dialog
               break;
         }
         break;
      }
      return;


  - name: joy_button_down_func
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    body: |
      switch (ev->joystick.button)
      {
      case 4:
         shutdown_game();
         break;
      case 1:
         advance();
         break;
      }
      return;


  - name: joy_axis_func
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    body: |
      static float joystick_0_y_state = 0.0;
      static float joystick_1_y_state = 0.0;
      static float joystick_2_y_state = 0.0;

      switch (ev->joystick.stick)
      {
      case 0: // left most stick
         if (ev->joystick.axis == 1) // the up/down axis
         {
            float new_joystick_0_y_state = ev->joystick.pos;
            if (joystick_0_y_state < 0.5 && new_joystick_0_y_state >= 0.5)
            {
               // move cursor down
               // TODO move cursor down
               std::cout << "CURSOR DOWN" << std::endl;
            }
            else if (joystick_0_y_state > -0.5 && new_joystick_0_y_state <= -0.5)
            {
               // move cursor up
               // TODO move cursor down
               std::cout << "CURSOR UP" << std::endl;
            }
            joystick_0_y_state = new_joystick_0_y_state;
         }
         break;
      case 1:
         break;
      case 2: // the hat
         break;
      }
      return;


  - name: user_event_func
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    body: |
      return;


  - name: obtain_font_bin
    type: AllegroFlare::FontBin*
    guards: [ framework ]
    body: return &framework->get_font_bin_ref();


dependencies:


  - symbol: ALLEGRO_EVENT*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT_SOURCE
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Screen
    headers: [ AllegroFlare/Screen.hpp ]
  - symbol: AllegroFlare::Screens*
    headers: [ AllegroFlare/Screens.hpp ]
  - symbol: AllegroFlare::Framework*
    headers: [ AllegroFlare/Framework.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::Display
    headers: [ AllegroFlare/Display.hpp ]
  - symbol: AllegroFlare::AudioController
    headers: [ AllegroFlare/AudioController.hpp ]
  - symbol: Krampus21::Screens::Base*
    headers: [ Krampus21/Screens/Base.hpp ]
  - symbol: Krampus21::UserEventEmitter
    headers: [ Krampus21/UserEventEmitter.hpp ]
  - symbol: std::map<std::string, AllegroFlare::AudioRepositoryElement>
    headers: [ map, string, AllegroFlare/AudioRepositoryElement.hpp ]
  - symbol: Krampus21::DialogBoxes::Basic
    headers: [ Krampus21/DialogBoxes/Basic.hpp ]
  - symbol: Krampus21::DialogBoxRenderer
    headers: [ Krampus21/DialogBoxRenderer.hpp ]
  - symbol: Krampus21::DialogFactory
    headers: [ Krampus21/DialogFactory.hpp ]
  - symbol: std::vector<Krampus21::DialogBoxes::Base*>
    headers: [ vector, Krampus21/DialogBoxes/Base.hpp ]
  - symbol: Krampus21::DialogBoxes::Base*
    headers: [ Krampus21/DialogBoxes/Base.hpp ]
  - symbol: Krampus21::ScriptLoader
    headers: [ Krampus21/ScriptLoader.hpp ]
  - symbol: Krampus21::Script
    headers: [ Krampus21/Script.hpp ]
  - symbol: AllegroFlare::php::file_get_contents_split
    headers: [ AllegroFlare/UsefulPHP.hpp ]
  - symbol: Blast::FileExistenceChecker
    headers: [ Blast/FileExistenceChecker.hpp ]
  - symbol: Krampus21::ScriptLineRunner
    headers: [ Krampus21/ScriptLineRunner.hpp ]


