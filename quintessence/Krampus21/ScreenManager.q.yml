parent_classes:


  - class: AllegroFlare::Screen
    scope: public
    init_with: ''


properties:


  - name: framework
    type: AllegroFlare::Framework*
    init_with: nullptr
    constructor_arg: true

  - name: screens
    type: AllegroFlare::Screens*
    init_with: nullptr
    constructor_arg: true

  - name: sound_effect_elements
    type: std::map<std::string, AllegroFlare::AudioRepositoryElement>
    private: true
    init_with: '{}'
    constructor_arg: true

  - name: music_track_elements
    type: std::map<std::string, AllegroFlare::AudioRepositoryElement>
    private: true
    init_with: '{}'
    constructor_arg: true

  - name: dialog_filename
    type: std::string
    init_with: '"unset-dialog-file.txt"'
    constructor_arg: true
    getter: true

  - name: user_event_emitter_souce
    type: ALLEGRO_EVENT_SOURCE
    init_with: '{}'

  - name: user_event_emitter
    type: Krampus21::UserEventEmitter
    init_with: '{}'

  - name: audio_controller
    type: AllegroFlare::AudioController
    init_with: '&framework->get_sample_bin_ref(), sound_effect_elements, music_track_elements'

  - name: dialogs
    type: std::vector<Krampus21::DialogBoxes::Base*>
    init_with: '{}'

  - name: current_dialog
    type: Krampus21::DialogBoxes::Base*
    init_with: nullptr

  - name: dialog_num_revealed_characters
    type: int
    init_with: 0

  - name: initialized
    type: bool
    init_with: false


functions:


  - name: initialize
    guards: [ (!initialized) ]
    body: |
      audio_controller.initialize();
      initialized = true;
      return;
    body_dependency_symbols:
      - Krampus21::DialogFactory


  - name: start_game
    body: |
      clear_all_dialogs();

      std::vector<std::string> script_lines = {
         { "DIALOG: This will be the first dialog loaded through a script loader." },
         { "CHOICE: How will you go? | Out like a flame | GOTO FLAMING_END | Quietly in the night | GOTO CALM_END" },
      };

      Krampus21::ScriptLoader script_loader(script_lines);
      dialogs = script_loader.parse();

      if (dialogs.empty())
      {
         // no dialogs are loaded
      }
      else
      {
         current_dialog = dialogs[0];
      }

      play_music_track("etherial-ambience-01.wav");

      dialog_num_revealed_characters = 0;
    body_dependency_symbols:
      - Krampus21::ScriptLoader


  - name: clear_all_dialogs
    type: void
    body: |
      for (auto &dialog : dialogs) { if (dialog) delete dialog; }
      dialogs.clear();
      current_dialog = nullptr;
      return;


  - name: shutdown_game
    guards: [ framework ]
    body: |
      framework->shutdown_program = true;
      return;


  - name: advance_dialog
    guards: [ framework ]
    body: |
      if (!current_dialog) return;
      current_dialog->next_page();
      dialog_num_revealed_characters = 0;
      return;


  - name: move_dialog_choice_cursor_up
    body: |
      // TODO
      return;


  - name: move_dialog_choice_cursor_down
    body: |
      // TODO
      return;


  - name: submit_dialog_choice_selection
    body: |
      // TODO
      return;


  - name: update_dialog_playing
    body: |
      if (current_dialog) current_dialog->update();
      dialog_num_revealed_characters++;
      return;


  - name: dialog_is_finished
    type: bool
    body: |
      if (!current_dialog) return true;
      return current_dialog->get_finished();


  - name: primary_timer_func
    override: true
    body: |
      al_clear_to_color(ALLEGRO_COLOR{0, 0, 0, 0});
      update_dialog_playing();
      if (dialog_is_finished())
      {
      }
      else
      {
         Krampus21::DialogBoxRenderer renderer(obtain_font_bin(), current_dialog, dialog_num_revealed_characters);
         renderer.render();
      }
      return;
    body_dependency_symbols:
      - Krampus21::DialogBoxRenderer


  - name: play_music_track
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"unset-music-identifier"'
    body: |
      audio_controller.play_music_track_by_identifier(identifier);
      return;


  - name: key_down_func
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    body: |
      switch (ev->type)
      {
      case ALLEGRO_EVENT_KEY_DOWN:
         switch(ev->keyboard.keycode)
         {
            case ALLEGRO_KEY_ESCAPE:
               shutdown_game();
               break;
            case ALLEGRO_KEY_SPACE:
               advance_dialog();
               break;
            case ALLEGRO_KEY_UP:
            case ALLEGRO_KEY_K:
               if (is_current_dialog_a_choice()) move_dialog_choice_cursor_up();
               break;
            case ALLEGRO_KEY_DOWN:
            case ALLEGRO_KEY_J:
               if (is_current_dialog_a_choice()) move_dialog_choice_cursor_down();
               break;
            case ALLEGRO_KEY_ENTER:
               submit_dialog_choice_selection();
               break;
         }
         break;
      }
      return;


  - name: joy_button_down_func
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    body: |
      int button_mapped_for_advancing_dialog = 1;
      switch (ev->joystick.button)
      {
      case 4:
         shutdown_game();
         break;
      case 1:
         advance_dialog();
         break;
      }
      return;


  - name: user_event_func
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    body: |
      return;


  - name: obtain_font_bin
    type: AllegroFlare::FontBin*
    guards: [ framework ]
    body: return &framework->get_font_bin_ref();


  - name: is_current_dialog_a_choice
    type: bool
    body: |
      return (current_dialog && current_dialog->is_type("Choice"));


dependencies:


  - symbol: ALLEGRO_EVENT*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT_SOURCE
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Screen
    headers: [ AllegroFlare/Screen.hpp ]
  - symbol: AllegroFlare::Screens*
    headers: [ AllegroFlare/Screens.hpp ]
  - symbol: AllegroFlare::Framework*
    headers: [ AllegroFlare/Framework.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::Display
    headers: [ AllegroFlare/Display.hpp ]
  - symbol: AllegroFlare::AudioController
    headers: [ AllegroFlare/AudioController.hpp ]
  - symbol: Krampus21::Screens::Base*
    headers: [ Krampus21/Screens/Base.hpp ]
  - symbol: Krampus21::UserEventEmitter
    headers: [ Krampus21/UserEventEmitter.hpp ]
  - symbol: std::map<std::string, AllegroFlare::AudioRepositoryElement>
    headers: [ map, string, AllegroFlare/AudioRepositoryElement.hpp ]
  - symbol: Krampus21::DialogBoxes::Basic
    headers: [ Krampus21/DialogBoxes/Basic.hpp ]
  - symbol: Krampus21::DialogBoxRenderer
    headers: [ Krampus21/DialogBoxRenderer.hpp ]
  - symbol: Krampus21::DialogFactory
    headers: [ Krampus21/DialogFactory.hpp ]
  - symbol: std::vector<Krampus21::DialogBoxes::Base*>
    headers: [ vector, Krampus21/DialogBoxes/Base.hpp ]
  - symbol: Krampus21::DialogBoxes::Base*
    headers: [ Krampus21/DialogBoxes/Base.hpp ]
  - symbol: Krampus21::ScriptLoader
    headers: [ Krampus21/ScriptLoader.hpp ]


