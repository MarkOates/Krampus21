properties:


  - name: dialog_factory
    type: Krampus21::DialogFactory
    init_with: '{}'


functions:


  - name: parse_line_and_create_dialog
    type: Krampus21::DialogBoxes::Base*
    private: true
    parameters:
      - name: script_line
        type: std::string
        default_argument: '{}'
    body: |
      std::string DIALOG = "DIALOG";
      std::string CHOICE = "CHOICE";
      Krampus21::DialogBoxes::Base* created_dialog = nullptr;
      std::pair<std::string, std::string> command_and_argument = parse_command_and_argument(script_line);
      std::string command = command_and_argument.first;
      std::string argument = command_and_argument.second;

      if (command.empty() || command == DIALOG)
      {
         created_dialog = dialog_factory.create_basic_dialog(std::vector<std::string>{script_line});
      }
      else if (command == CHOICE)
      {
         std::string choice_prompt = "[coice-prompt-text-not-extracted]";
         std::vector<std::pair<std::string, std::string>> choice_options = {};

         // tokenize
         std::vector<std::string> tokens = tokenize(argument);

         // validate
         // expect at least 3 tokens
         assert_min_token_count(tokens, 3);
         // expect an odd number of tokens
         assert_odd_token_count(tokens);

         // first token is the prompt
         choice_prompt = tokens[0];
         // next consecutive tokens are (choice_text, choice_value) pairs
         for (unsigned i=2; i<tokens.size(); i+=2)
         {
            // TODO warning if token is empty
            choice_options.push_back({ tokens[i-1], tokens[i] });
         }

         //choice_options = { { "Boobar", "boobruhh" }, { "Zoozaz", "zazzle" } };
         created_dialog = dialog_factory.create_choice_dialog(choice_prompt, choice_options);
      }

      return created_dialog;


  - name: parse_command_and_argument
    static: true
    private: true
    type: std::pair<std::string, std::string>
    parameters:
      - name: script_line
        type: std::string
        default_argument: '{}'
    body: |
      std::pair<std::string, std::string> result{"", ""};
      std::string DELIMETER = ": ";

      std::size_t pos = script_line.find(DELIMETER);

      if (pos == std::string::npos)
      {
         result.first = "DIALOG";
         result.second = script_line;
      }
      else
      {
         std::string command_fragment_unsanitized = script_line.substr(0, pos);

         // TODO validate format of command (all caps, underscore, no spaces)
         // here

         result.first = Blast::String::Trimmer(command_fragment_unsanitized).trim();
         result.second = Blast::String::Trimmer(script_line.substr(pos+DELIMETER.size())).trim();
      }

      return result;
    body_dependency_symbols:
      - Blast::String::Trimmer


  - name: build_markers_index
    static: true
    type: std::map<std::string, int>
    parameters:
      - name: script_lines
        type: std::vector<std::string>
        default_argument: '{}'
    body: |
      std::map<std::string, int> result;
      for (unsigned i=0; i<script_lines.size(); i++)
      {
         std::string script_line = script_lines[i];
         std::pair<std::string, std::string> command_and_argument = parse_command_and_argument(script_line);
         std::string command = command_and_argument.first;
         std::string argument = command_and_argument.second;
         int line_num = i+1;

         if (command == "MARKER")
         {
            // TODO ensure symbols don't appear multiple times
            if (result.find(argument) != result.end())
            {
               std::cout << "Krampus21/ScriptLineRunner::build_markers_index: WARNING: the marker "
                         << "\"" << argument << "\""
                         << "is being set on line " << line_num
                         << " but was already declared earlier on line " << result[argument] << ". "
                         << "Note that the marker will be overwritten to this new line number ("
                         << line_num << ").";
            }

            result[argument] = line_num;
         }
      }
      return result;
    body_dependency_symbols:
      - std::cout


  - name: tokenize
    private: true
    static: true
    type: std::vector<std::string>
    parameters:
      - name: str
        type: std::string
        default_argument: '""'
      - name: delim
        type: char
        default_argument: "'|'"
    body: |
      std::vector<std::string> tokens = Blast::StringSplitter(str, delim).split();
      for (auto &token : tokens) token = Blast::String::Trimmer(token).trim();
      return tokens;
    body_dependency_symbols:
      - Blast::String::Trimmer
      - Blast::StringSplitter
      - std::vector<std::string>


  - name: assert_min_token_count
    type: bool
    private: true
    static: true
    parameters:
      - name: tokens
        type: std::vector<std::string>
        default_argument: '{}'
      - name: min
        type: int
        default_argument: 0
    body: |
      return (tokens.size() >= min);


  - name: assert_odd_token_count
    type: bool
    private: true
    static: true
    parameters:
      - name: tokens
        type: std::vector<std::string>
        default_argument: '{}'
      - name: min
        type: int
        default_argument: 0
    body: |
      return (tokens.size() % 2);


dependencies:


  - symbol: std::map<std::string, int>
    headers: [ map, string ]
  - symbol: std::vector<std::string>&
    headers: [ vector, string ]
  - symbol: std::vector<Krampus21::DialogBoxes::Base*>
    headers: [ vector, Krampus21/DialogBoxes/Base.hpp ]
  - symbol: Krampus21::DialogBoxes::Base*
    headers: [ Krampus21/DialogBoxes/Base.hpp ]
  - symbol: Krampus21::DialogFactory
    headers: [ Krampus21/DialogFactory.hpp ]
  - symbol: Krampus21::DialogBoxes::Basic*
    headers: [ Krampus21/DialogBoxes/Basic.hpp ]
  - symbol: std::pair<std::string, std::string>
    headers: [ utility, string ]
  - symbol: Blast::String::Trimmer
    headers: [ Blast/String/Trimmer.hpp ]
  - symbol: Blast::StringSplitter
    headers: [ Blast/StringSplitter.hpp ]


