properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true

  - name: af_inventory
    type: AllegroFlare::Inventory*
    init_with: nullptr
    constructor_arg: true

  - name: place
    type: allegro_flare::placement2d
    init_with: '{ 1920/2, 1080/2, 1300, 700 }'
    getter: true

  - name: cursor_x
    type: int
    init_with: 0

  - name: cursor_y
    type: int
    init_with: 0

  - name: num_columns
    type: int
    init_with: 4

  - name: num_rows
    type: int
    init_with: 3

  - name: active
    type: bool
    init_with: false

  - name: active_animation_counter
    type: float
    init_with: 0

  - name: focus_selection_animation_counter
    type: float
    init_with: 0

  - name: inventory_index
    type: std::map<int, std::tuple<std::string, std::string, std::string>>
    init_with: 'build_inventory_index()'


functions:


  - name: update
    guards: [ font_bin, bitmap_bin, af_inventory ]
    body: |
      // TODO
      return;


  - name: render
    guards: [ font_bin, bitmap_bin, af_inventory ]
    body: |
      place.start_transform();

      draw_backframe();
      draw_inventory_title_text();
      draw_inventory_boxes_and_elevated_item_selection();
      draw_details_frame();

      place.restore_transform();

      return;
    body_dependency_symbols:
     - X


  - name: draw_backframe
    private: true
    body: |
      ALLEGRO_COLOR backfill_color = ALLEGRO_COLOR{0.05, 0.05, 0.1, 0.7};
      ALLEGRO_COLOR left_overbackfill_color = ALLEGRO_COLOR{1.0 * 0.02, 0.8 * 0.02, 0.02 * 0.02, 0.02};
      ALLEGRO_COLOR top_and_bottom_pin_line_color = ALLEGRO_COLOR{0.2, 0.2, 0.2, 0.2};

      // backfill
      al_draw_filled_rectangle(0, 0, place.size.x, place.size.y, backfill_color);

      // left "overbackfill"
      al_draw_filled_rectangle(0, 0, 800, place.size.y, left_overbackfill_color);

      // top and bottom pin lines
      al_draw_line(0, 0, place.size.x, 0, top_and_bottom_pin_line_color, 2.0);
      al_draw_line(0, place.size.y, place.size.x, place.size.y, top_and_bottom_pin_line_color, 2.0);
      return;


  - name: draw_inventory_title_text
    private: true
    body: |
      ALLEGRO_FONT *font = obtain_title_font();
      ALLEGRO_COLOR color = ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0};
      al_draw_text(font, color, 0, -50, ALLEGRO_ALIGN_LEFT, "I N V E N T O R Y");
      return;


  - name: draw_inventory_boxes_and_elevated_item_selection
    private: true
    body: |
      std::vector<int> items_in_inventory = af_inventory->get_items_ref();

      float x = 80;
      float y = 80;
      float spacing = 150 + 20;
      int inventory_position = 0;
      for (unsigned row=0; row<3; row++)
      {
         for (unsigned column=0; column<4; column++)
         {
            int item_to_draw = 0;
            if (inventory_position >= items_in_inventory.size()) {}
            else { item_to_draw = items_in_inventory[inventory_position]; }

            draw_inventory_item_box(x + column * spacing, y + row * spacing, item_to_draw);
            inventory_position++;
         }
         inventory_position++;
      }
      return;


  - name: draw_details_frame
    private: true
    body: |
      // TODO
      return;


  - name: move_cursor_up
    body: |
      // TODO
      return;


  - name: move_cursor_down
    body: |
      // TODO
      return;


  - name: move_cursor_left
    body: |
      // TODO
      return;


  - name: move_cursor_right
    body: |
      // TODO
      return;


  - name: activate
    body: |
      // TODO
      return;


  - name: deactivate
    body: |
      // TODO
      return;


  - name: draw_inventory_item_box
    private: true
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: item
        type: int
        default_argument: 0
    body: |
      ALLEGRO_COLOR backfill_color = ALLEGRO_COLOR{0.0, 0.0, 0.0, 0.3};
      float roundness = 6.0f;

      // draw frame
      al_draw_filled_rounded_rectangle(x+0, y+0, x+150, y+150, roundness, roundness, backfill_color);

      std::tuple<std::string, std::string, std::string> item_definition = get_item_definition(item);
      bool contains_item = !std::get<0>(item_definition).empty();
      if (contains_item)
      {
         std::string item_name = std::get<0>(item_definition);
         std::string item_bitmap_identifier = std::get<1>(item_definition); //"watch-01.png";
         ALLEGRO_BITMAP *bitmap = bitmap_bin->auto_get(item_bitmap_identifier);

         ALLEGRO_COLOR color = ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0};
         ALLEGRO_FONT *font = obtain_item_name_font();
         al_draw_text(font, color, x, y + 150 - 20, ALLEGRO_ALIGN_LEFT, item_name.c_str());

         allegro_flare::placement2d box_place;
         box_place.position.x = x + 150/2;
         box_place.position.y = y + 150/2;
         box_place.size.x = 800;
         box_place.size.y = 800;
         box_place.scale.x = 0.25;
         box_place.scale.y = 0.25;

         box_place.start_transform();
         al_draw_bitmap(bitmap, 0, 0, 0);
         box_place.restore_transform();
      }
      return;


  - name: get_item_definition
    type: std::tuple<std::string, std::string, std::string>
    private: true
    parameters:
      - name: index
        type: int
        default_argument: 0
    body: |
      if (inventory_index.find(index) == inventory_index.end()) return {};
      return inventory_index[index];


  - name: obtain_title_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin->auto_get("Lato-Bold.ttf -40");


  - name: obtain_item_name_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin->auto_get("Lato-Regular.ttf -30");


  - name: build_inventory_index
    type: std::map<int, std::tuple<std::string, std::string, std::string>>
    static: true
    body: |
      std::map<int, std::tuple<std::string, std::string, std::string>> result = {
         //{ 1, { "Bracelet", "bracelet.png", "A gift given to you." } },
         { 2, { "Watch", "watch-01.png", "Useful tool to keep you on track." } },
      };
      return result;


dependencies:


  - symbol: AllegroFlare::Inventory*
    headers: [ AllegroFlare/Inventory.hpp ]
  - symbol: allegro_flare::placement2d
    headers: [ allegro_flare/placement2d.h ]
  - symbol: AllegroFlare::BitmapBin*
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: X
    headers:
      - allegro5/allegro_primitives.h
      - allegro5/allegro_color.h
  - symbol: std::map<int, std::tuple<std::string, std::string, std::string>>
    headers: [ map, utility, string ]
  - symbol: std::vector<std::tuple<std::string, std::string, std::string>>
    headers: [ vector, utility, string ]
  - symbol: std::tuple<std::string, std::string, std::string>
    headers: [ utility, string ]


