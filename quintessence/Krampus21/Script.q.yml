properties:


  - name: lines
    type: std::vector<std::string>
    init_with: '{}'
    constructor_arg: true

  - name: current_line_num
    type: int
    init_with: 0
    getter: true

  - name: markers_index
    type: std::map<std::string, int>
    init_with: '{}'

  - name: initialized
    type: bool
    init_with: false

  - name: finished
    type: bool
    init_with: false
    getter: true


functions:


  - name: initialize
    guards: [ (!initialized) ]
    body: |
      build_markers_index();
      if (!lines.empty())
      {
         current_line_num = 1;
         finished = false;
      }
      else
      {
         finished = true;
      }
      initialized = true;
      return;


  - name: get_current_line_text
    guards: [ initialized ]
    type: std::string
    body: |
      if (!at_valid_line()) return "";
      return lines[infer_current_line_index_num()];


  - name: goto_next_line
    guards: [ initialized ]
    type: bool
    body: |
      if (at_last_line())
      {
         current_line_num = 0;
         finished = true;
      }
      else
      {
         if (!at_valid_line()) return false;
         current_line_num++;
      }
      return !finished;


  - name: goto_line_num
    guards: [ initialized ]
    parameters:
      - name: line_num
        type: int
        default_argument: 0
    type: bool
    body: |
      int line_index_num = line_num - 1;

      if (line_index_num < 0) return false;
      if (line_index_num >= lines.size()) return false;
      current_line_num = line_num;
      return true;


  - name: at_last_line
    guards: [ initialized ]
    type: bool
    body: |
      if (!lines.empty() && infer_current_line_index_num() == (lines.size()-1));


  - name: at_valid_line
    private: true
    type: bool
    body: |
      if (lines.empty()) return false;
      if (infer_current_line_index_num() < 0) return false;
      if (infer_current_line_index_num() >= lines.size()) return false;
      return true;


  - name: build_markers_index
    private: true
    body: |
      markers_index = Krampus21::ScriptLoader::build_markers_index(lines);
      return;
    body_dependency_symbols:
      - Krampus21::ScriptLoader::build_markers_index


  - name: infer_current_line_index_num
    private: true
    type: int
    body: |
      return current_line_num - 1;


dependencies:


  - symbol: std::map<std::string, int>
    headers: [ map, string ]
  - symbol: Krampus21::ScriptLoader::build_markers_index
    headers: [ Krampus21/ScriptLoader.hpp ]


