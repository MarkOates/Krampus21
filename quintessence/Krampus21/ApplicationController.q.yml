parent_classes:


  - class: AllegroFlare::Screen
    scope: public
    init_with: ''


properties:


  - name: framework
    type: AllegroFlare::Framework*
    init_with: nullptr
    constructor_arg: true

  - name: screens
    type: AllegroFlare::Screens*
    init_with: nullptr
    constructor_arg: true

  - name: sound_effect_elements
    type: std::map<std::string, AllegroFlare::AudioRepositoryElement>
    private: true
    init_with: '{}'
    constructor_arg: true

  - name: music_track_elements
    type: std::map<std::string, AllegroFlare::AudioRepositoryElement>
    private: true
    init_with: '{}'
    constructor_arg: true

  - name: user_event_emitter_souce
    type: ALLEGRO_EVENT_SOURCE
    init_with: '{}'

  - name: user_event_emitter
    type: Krampus21::UserEventEmitter
    init_with: '{}'

  - name: audio_controller
    type: AllegroFlare::AudioController
    init_with: '&framework->get_sample_bin_ref(), sound_effect_elements, music_track_elements'

  - name: current_dialog
    type: Krampus21::DialogBoxes::Base*
    init_with: nullptr

  - name: initialized
    type: bool
    init_with: false

  - name: script
    type: Krampus21::Script
    init_with: ''

  - name: dialog_factory
    type: Krampus21::DialogFactory
    init_with: '{}'


functions:


  - name: initialize
    guards: [ (!initialized) ]
    body: |
      audio_controller.initialize();
      initialized = true;
      return;


  - name: load_script
    type: bool
    parameters:
      - name: filename
        type: std::string
        default_argument: '"unset-script-filename.txt"'
    body: |
      if (!Blast::FileExistenceChecker(filename).exists())
      {
         std::cout << "ApplicationController::load_script: file \"" << filename
                   << "\" does not exist and could not be loaded." << std::endl;
         return false;
      }
      std::vector<std::string> script_lines = AllegroFlare::php::file_get_contents_split(filename);
      script = Krampus21::Script(script_lines);
      script.initialize();
      return true;
    body_dependency_symbols:
      - AllegroFlare::php::file_get_contents_split
      - Blast::FileExistenceChecker


  - name: advance
    body: |
      script.goto_next_line();
      play_current_script_line();
      // if it's a dialog and the dialog is finished, play the next script line
      //if (current_dialog) current_dialog->
      return;


  - name: play_current_script_line
    body: |
      std::string script_line_text = script.get_current_line_text();
      Krampus21::DialogBoxes::Base *created_dialog = parse_line_and_create_dialog(script_line_text);
      if (created_dialog)
      {
         if (current_dialog) delete current_dialog;
         current_dialog = created_dialog;
      }
    body_dependency_symbols:
      - Krampus21::DialogFactory


  - name: start_game
    body: |
      play_current_script_line();
      return;
    body_dependency_symbols: []


  - name: shutdown_game
    guards: [ framework ]
    body: |
      framework->shutdown_program = true;
      return;


  - name: dialog_is_finished
    type: bool
    body: |
      if (!current_dialog) return true;
      return current_dialog->get_finished();


  - name: primary_timer_func
    override: true
    body: |
      al_clear_to_color(ALLEGRO_COLOR{0, 0, 0, 0});
      if (current_dialog) current_dialog->update();
      if (dialog_is_finished())
      {
      }
      else if (current_dialog)
      {
         Krampus21::DialogBoxRenderer renderer(obtain_font_bin(), current_dialog);
         renderer.render();
      }
      return;
    body_dependency_symbols:
      - Krampus21::DialogBoxRenderer


  - name: key_down_func
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    body: |
      switch (ev->type)
      {
      case ALLEGRO_EVENT_KEY_DOWN:
         switch(ev->keyboard.keycode)
         {
            case ALLEGRO_KEY_ESCAPE:
               shutdown_game();
               break;
            case ALLEGRO_KEY_SPACE:
               advance();
               break;
            case ALLEGRO_KEY_UP:
            case ALLEGRO_KEY_K:
               // TODO move cursor up
               break;
            case ALLEGRO_KEY_DOWN:
            case ALLEGRO_KEY_J:
               // TODO move cursor down
               break;
            case ALLEGRO_KEY_ENTER:
               // TODO submit dialog
               break;
         }
         break;
      }
      return;


  - name: joy_button_down_func
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    body: |
      switch (ev->joystick.button)
      {
      case 4:
         shutdown_game();
         break;
      case 1:
         advance();
         break;
      }
      return;


  - name: joy_axis_func
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    body: |
      static float joystick_0_y_state = 0.0;
      static float joystick_1_y_state = 0.0;
      static float joystick_2_y_state = 0.0;

      switch (ev->joystick.stick)
      {
      case 0: // left most stick
         if (ev->joystick.axis == 1) // the up/down axis
         {
            float new_joystick_0_y_state = ev->joystick.pos;
            if (joystick_0_y_state < 0.5 && new_joystick_0_y_state >= 0.5)
            {
               // move cursor down
               // TODO move cursor down
               std::cout << "CURSOR DOWN" << std::endl;
            }
            else if (joystick_0_y_state > -0.5 && new_joystick_0_y_state <= -0.5)
            {
               // move cursor up
               // TODO move cursor down
               std::cout << "CURSOR UP" << std::endl;
            }
            joystick_0_y_state = new_joystick_0_y_state;
         }
         break;
      case 1:
         break;
      case 2: // the hat
         break;
      }
      return;


  - name: user_event_func
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    body: |
      return;


  - name: obtain_font_bin
    private: true
    type: AllegroFlare::FontBin*
    guards: [ framework ]
    body: return &framework->get_font_bin_ref();


  - name: parse_line_and_create_dialog
    type: Krampus21::DialogBoxes::Base*
    private: true
    parameters:
      - name: script_line
        type: std::string
        default_argument: '{}'
    body: |
      std::string DIALOG = "DIALOG";
      std::string CHOICE = "CHOICE";
      std::string PLAY_MUSIC = "PLAY_MUSIC";

      Krampus21::DialogBoxes::Base* created_dialog = nullptr;
      std::pair<std::string, std::string> command_and_argument = parse_command_and_argument(script_line);
      std::string command = command_and_argument.first;
      std::string argument = command_and_argument.second;

      if (command.empty() || command == DIALOG)
      {
         created_dialog = dialog_factory.create_basic_dialog(std::vector<std::string>{script_line});
      }
      else if (command == CHOICE)
      {
         std::string choice_prompt = "[coice-prompt-text-not-extracted]";
         std::vector<std::pair<std::string, std::string>> choice_options = {};

         // tokenize
         std::vector<std::string> tokens = tokenize(argument);

         // validate
         // expect at least 3 tokens
         assert_min_token_count(tokens, 3);
         // expect an odd number of tokens
         assert_odd_token_count(tokens);

         // first token is the prompt
         choice_prompt = tokens[0];
         // next consecutive tokens are (choice_text, choice_value) pairs
         for (unsigned i=2; i<tokens.size(); i+=2)
         {
            // TODO warning if token is empty
            choice_options.push_back({ tokens[i-1], tokens[i] });
         }

         //choice_options = { { "Boobar", "boobruhh" }, { "Zoozaz", "zazzle" } };
         created_dialog = dialog_factory.create_choice_dialog(choice_prompt, choice_options);
      }
      else if (command == PLAY_MUSIC)
      {
         std::string identifier = "etherial-ambience-01.wav";
         audio_controller.play_music_track_by_identifier(identifier);
      }
      else
      {
         std::cout << "WARNING: Unrecognized command \"" << command << "\"" << std::endl;
      }

      return created_dialog;


  - name: parse_command_and_argument
    static: true
    private: true
    type: std::pair<std::string, std::string>
    parameters:
      - name: script_line
        type: std::string
        default_argument: '{}'
    body: |
      std::pair<std::string, std::string> result{"", ""};
      std::string DELIMETER = ": ";

      std::size_t pos = script_line.find(DELIMETER);

      if (pos == std::string::npos)
      {
         result.first = "DIALOG";
         result.second = script_line;
      }
      else
      {
         std::string command_fragment_unsanitized = script_line.substr(0, pos);

         // TODO validate format of command (all caps, underscore, no spaces)
         // here

         result.first = Blast::String::Trimmer(command_fragment_unsanitized).trim();
         result.second = Blast::String::Trimmer(script_line.substr(pos+DELIMETER.size())).trim();
      }

      return result;
    body_dependency_symbols:
      - Blast::String::Trimmer


  - name: build_markers_index
    private: true
    static: true
    type: std::map<std::string, int>
    parameters:
      - name: script_lines
        type: std::vector<std::string>
        default_argument: '{}'
    body: |
      std::map<std::string, int> result;
      for (unsigned i=0; i<script_lines.size(); i++)
      {
         std::string script_line = script_lines[i];
         std::pair<std::string, std::string> command_and_argument = parse_command_and_argument(script_line);
         std::string command = command_and_argument.first;
         std::string argument = command_and_argument.second;
         int line_num = i+1;

         if (command == "MARKER")
         {
            // TODO ensure symbols don't appear multiple times
            if (result.find(argument) != result.end())
            {
               std::cout << "Krampus21/ApplicationController::build_markers_index: WARNING: the marker "
                         << "\"" << argument << "\""
                         << "is being set on line " << line_num
                         << " but was already declared earlier on line " << result[argument] << ". "
                         << "Note that the marker will be overwritten to this new line number ("
                         << line_num << ").";
            }

            result[argument] = line_num;
         }
      }
      return result;
    body_dependency_symbols:
      - std::cout


  - name: tokenize
    private: true
    static: true
    type: std::vector<std::string>
    parameters:
      - name: str
        type: std::string
        default_argument: '""'
      - name: delim
        type: char
        default_argument: "'|'"
    body: |
      std::vector<std::string> tokens = Blast::StringSplitter(str, delim).split();
      for (auto &token : tokens) token = Blast::String::Trimmer(token).trim();
      return tokens;
    body_dependency_symbols:
      - Blast::String::Trimmer
      - Blast::StringSplitter
      - std::vector<std::string>


  - name: assert_min_token_count
    type: bool
    private: true
    static: true
    parameters:
      - name: tokens
        type: std::vector<std::string>
        default_argument: '{}'
      - name: min
        type: int
        default_argument: 0
    body: |
      return (tokens.size() >= min);


  - name: assert_odd_token_count
    type: bool
    private: true
    static: true
    parameters:
      - name: tokens
        type: std::vector<std::string>
        default_argument: '{}'
      - name: min
        type: int
        default_argument: 0
    body: |
      return (tokens.size() % 2);


dependencies:


  - symbol: ALLEGRO_EVENT*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT_SOURCE
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Screen
    headers: [ AllegroFlare/Screen.hpp ]
  - symbol: AllegroFlare::Screens*
    headers: [ AllegroFlare/Screens.hpp ]
  - symbol: AllegroFlare::Framework*
    headers: [ AllegroFlare/Framework.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::Display
    headers: [ AllegroFlare/Display.hpp ]
  - symbol: AllegroFlare::AudioController
    headers: [ AllegroFlare/AudioController.hpp ]
  - symbol: Krampus21::Screens::Base*
    headers: [ Krampus21/Screens/Base.hpp ]
  - symbol: Krampus21::UserEventEmitter
    headers: [ Krampus21/UserEventEmitter.hpp ]
  - symbol: std::map<std::string, AllegroFlare::AudioRepositoryElement>
    headers: [ map, string, AllegroFlare/AudioRepositoryElement.hpp ]
  - symbol: Krampus21::DialogBoxes::Basic
    headers: [ Krampus21/DialogBoxes/Basic.hpp ]
  - symbol: Krampus21::DialogBoxRenderer
    headers: [ Krampus21/DialogBoxRenderer.hpp ]
  - symbol: Krampus21::DialogFactory
    headers: [ Krampus21/DialogFactory.hpp ]
  - symbol: std::vector<Krampus21::DialogBoxes::Base*>
    headers: [ vector, Krampus21/DialogBoxes/Base.hpp ]
  - symbol: Krampus21::DialogBoxes::Base*
    headers: [ Krampus21/DialogBoxes/Base.hpp ]
  - symbol: Krampus21::ScriptLoader
    headers: [ Krampus21/ScriptLoader.hpp ]
  - symbol: Krampus21::Script
    headers: [ Krampus21/Script.hpp ]
  - symbol: AllegroFlare::php::file_get_contents_split
    headers: [ AllegroFlare/UsefulPHP.hpp ]
  - symbol: Blast::FileExistenceChecker
    headers: [ Blast/FileExistenceChecker.hpp ]
  - symbol: std::map<std::string, int>
    headers: [ map, string ]
  - symbol: std::vector<std::string>&
    headers: [ vector, string ]
  - symbol: std::vector<Krampus21::DialogBoxes::Base*>
    headers: [ vector, Krampus21/DialogBoxes/Base.hpp ]
  - symbol: Krampus21::DialogBoxes::Base*
    headers: [ Krampus21/DialogBoxes/Base.hpp ]
  - symbol: Krampus21::DialogFactory
    headers: [ Krampus21/DialogFactory.hpp ]
  - symbol: Krampus21::DialogBoxes::Basic*
    headers: [ Krampus21/DialogBoxes/Basic.hpp ]
  - symbol: std::pair<std::string, std::string>
    headers: [ utility, string ]
  - symbol: Blast::String::Trimmer
    headers: [ Blast/String/Trimmer.hpp ]
  - symbol: Blast::StringSplitter
    headers: [ Blast/StringSplitter.hpp ]


